# ProtocolMutator: Reads outcomes, identifies failures, and rewrites protocol logic
import json
import os
from utils.logger import log

def mutate_protocol(protocol_name):
    """Analyze protocol outcomes and mutate if failure rate is high"""
    memory_file = f'memory/{protocol_name}.json'
    if not os.path.exists(memory_file):
        log(f"No memory file found for {protocol_name}. Nothing to mutate.")
        return False

    # Analyze outcomes
    failures = 0
    total = 0
    try:
        with open(memory_file, 'r') as f:
            for line in f:
                if line.strip():
                    outcome = json.loads(line)
                    total += 1
                    if not outcome.get('success', False):
                        failures += 1
    except (json.JSONDecodeError, FileNotFoundError) as e:
        log(f"Error reading memory file: {e}")
        return False

    if total == 0:
        log(f"No outcomes recorded for {protocol_name}")
        return False
        
    failure_rate = failures / total
    log(f"Protocol {protocol_name}: {failures}/{total} failures (rate: {failure_rate:.2%})")
    
    if failure_rate < 0.5:
        log(f"Mutation not needed. Failure rate acceptable: {failure_rate:.2%}")
        return False

    # Rewrite protocol file with improved logic
    protocol_file = f'protocols/{protocol_name}.py'
    if not os.path.exists(protocol_file):
        log(f"No protocol source file found for {protocol_name}")
        return False

    log(f"🔄 Mutating protocol: {protocol_name} due to high failure rate ({failure_rate:.2%})")

    # Generate improved protocol logic
    mutated_logic = f'''# Mutated protocol file - Auto-generated by ProtocolMutator
# Previous failure rate: {failure_rate:.2%}
# Mutation timestamp: {json.dumps({"timestamp": __import__("datetime").datetime.utcnow().isoformat()})}

def task():
    """Improved task implementation after mutation"""
    from random import choice, random
    
    # Enhanced logic with better success probability
    if random() < 0.8:  # 80% success rate instead of 50%
        result = {{'success': True, 'action': 'optimized_execution', 'mutation_gen': 1}}
    else:
        result = {{'success': False, 'action': 'controlled_failure', 'mutation_gen': 1}}
    
    return result
'''

    try:
        # Backup original protocol
        backup_file = f'{protocol_file}.backup'
        if os.path.exists(protocol_file):
            with open(protocol_file, 'r') as orig, open(backup_file, 'w') as backup:
                backup.write(orig.read())

        # Write mutated protocol
        with open(protocol_file, 'w') as f:
            f.write(mutated_logic)
        
        log(f"✅ Protocol {protocol_name} mutated successfully. Backup saved to {backup_file}")
        return True
        
    except Exception as e:
        log(f"❌ Failed to mutate protocol {protocol_name}: {e}")
        return False


def analyze_all_protocols():
    """Analyze and potentially mutate all protocols with recorded outcomes"""
    memory_dir = 'memory'
    if not os.path.exists(memory_dir):
        log("No memory directory found")
        return
    
    mutated_count = 0
    for filename in os.listdir(memory_dir):
        if filename.endswith('.json'):
            protocol_name = filename[:-5]  # Remove .json extension
            if mutate_protocol(protocol_name):
                mutated_count += 1
    
    log(f"Analysis complete. {mutated_count} protocols were mutated.")
    return mutated_count 